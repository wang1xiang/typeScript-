{
    "react/boolean-prop-naming": {
        "name": "react/boolean-prop-naming",
        "value": "off",
        "description": "布尔值类型的 propTypes 的 name 必须为 is 或 has 开头",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/button-has-type": {
        "name": "react/button-has-type",
        "value": "off",
        "description": "<button> 必须有 type 属性",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/default-props-match-prop-types": {
        "name": "react/default-props-match-prop-types",
        "value": "off",
        "description": "一个 defaultProps 必须有对应的 propTypes",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/destructuring-assignment": {
        "name": "react/destructuring-assignment",
        "value": "off",
        "description": "props state context 必须用解构赋值",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/display-name": {
        "name": "react/display-name",
        "value": "off",
        "description": "组件必须有 displayName 属性",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 displayName"
    },
    "react/forbid-component-props": {
        "name": "react/forbid-component-props",
        "value": "off",
        "description": "禁止在自定义组件中使用一些指定的 props",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/forbid-dom-props": {
        "name": "react/forbid-dom-props",
        "value": "off",
        "description": "禁止指定的 props",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/forbid-elements": {
        "name": "react/forbid-elements",
        "value": "off",
        "description": "禁止使用一些指定的 elements",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/forbid-foreign-prop-types": {
        "name": "react/forbid-foreign-prop-types",
        "value": "off",
        "description": "禁止直接使用别的组建的 propTypes",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/forbid-prop-types": {
        "name": "react/forbid-prop-types",
        "value": "off",
        "description": "禁止使用一些指定的 propTypes",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/no-access-state-in-setstate": {
        "name": "react/no-access-state-in-setstate",
        "value": "off",
        "description": "禁止在 setState 时使用 this.state",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-array-index-key": {
        "name": "react/no-array-index-key",
        "value": "off",
        "description": "禁止使用数组的 index 作为 key",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "太严格了"
    },
    "react/no-danger": {
        "name": "react/no-danger",
        "value": "off",
        "description": "禁止使用 dangerouslySetInnerHTML",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/no-did-mount-set-state": {
        "name": "react/no-did-mount-set-state",
        "value": "off",
        "description": "禁止在 componentDidMount 里面使用 setState",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "同构应用需要在 didMount 里写 setState"
    },
    "react/no-multi-comp": {
        "name": "react/no-multi-comp",
        "value": "off",
        "description": "禁止在一个文件创建两个组件",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "有一个 bug https://github.com/yannickcr/eslint-plugin-react/issues/1181"
    },
    "react/no-set-state": {
        "name": "react/no-set-state",
        "value": "off",
        "description": "禁止使用 setState",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "setState 很常用"
    },
    "react/no-this-in-sfc": {
        "name": "react/no-this-in-sfc",
        "value": "error",
        "description": "禁止在函数组件中使用 this",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unknown-property": {
        "name": "react/no-unknown-property",
        "value": "error",
        "description": "禁止出现 HTML 中的属性，如 class",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/no-unsafe": {
        "name": "react/no-unsafe",
        "value": "error",
        "description": "禁止使用不安全的生命周期方法 componentWillMount, componentWillReceiveProps, componentWillUpdate",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unused-prop-types": {
        "name": "react/no-unused-prop-types",
        "value": "off",
        "description": "禁止出现未使用的 propTypes",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/no-unused-state": {
        "name": "react/no-unused-state",
        "value": "off",
        "description": "定义过的 state 必须使用",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没有官方文档，并且存在很多 bug： https://github.com/yannickcr/eslint-plugin-react/search?q=no-unused-state&type=Issues&utf8=%E2%9C%93"
    },
    "react/prefer-read-only-props": {
        "name": "react/prefer-read-only-props",
        "value": "off",
        "description": "使用 Flow 时，props 必须设置为只读的",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/prefer-stateless-function": {
        "name": "react/prefer-stateless-function",
        "value": "off",
        "description": "必须使用 pure function",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/prop-types": {
        "name": "react/prop-types",
        "value": "off",
        "description": "组件必须写 propTypes",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/react-in-jsx-scope": {
        "name": "react/react-in-jsx-scope",
        "value": "off",
        "description": "出现 jsx 的地方必须 import React",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "已经在 no-undef 中限制了"
    },
    "react/require-default-props": {
        "name": "react/require-default-props",
        "value": "off",
        "description": "非 required 的 prop 必须有 defaultProps",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/require-optimization": {
        "name": "react/require-optimization",
        "value": "off",
        "description": "组件必须有 shouldComponentUpdate",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/self-closing-comp": {
        "name": "react/self-closing-comp",
        "value": "off",
        "description": "组件内没有 children 时，必须使用自闭和写法",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制",
        "fixable": true
    },
    "react/sort-comp": {
        "name": "react/sort-comp",
        "value": "error",
        "description": "组件内方法必须按照一定规则排序",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/sort-prop-types": {
        "name": "react/sort-prop-types",
        "value": "off",
        "description": "propTypes 的熟悉必须按照字母排序",
        "category": "React",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/state-in-constructor": {
        "name": "react/state-in-constructor",
        "value": "off",
        "description": "必须在构造函数中初始化 state",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/static-property-placement": {
        "name": "react/static-property-placement",
        "value": "error",
        "description": "类的静态属性必须使用 static 关键字定义",
        "category": "React",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-boolean-value": {
        "name": "react/jsx-boolean-value",
        "value": "off",
        "description": "布尔值的属性必须显式的写 someprop={true}",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-child-element-spacing": {
        "name": "react/jsx-child-element-spacing",
        "value": "off",
        "description": "禁止兄弟元素之间有空格",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-closing-bracket-location": {
        "name": "react/jsx-closing-bracket-location",
        "value": ["error", { "nonEmpty": false, "selfClosing": "line-aligned" }],
        "description": "自闭和标签的反尖括号必须与尖括号的那一行对齐",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-closing-tag-location": {
        "name": "react/jsx-closing-tag-location",
        "value": "off",
        "description": "结束标签必须与开始标签的那一行对齐",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "已经在 jsx-indent 中限制了",
        "fixable": true
    },
    "react/jsx-curly-brace-presence": {
        "name": "react/jsx-curly-brace-presence",
        "value": ["error", "never"],
        "description": "禁止 jsx 中使用无用的引号",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-curly-newline": {
        "name": "react/jsx-curly-newline",
        "value": "error",
        "description": "限制 jsx 中的大括号内部首尾换行符",
        "category": "JSX-specific",
        "badExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Unexpected newline before '{'.<br/><span class='eslint-error-rule-id'>eslint(react/jsx-curly-newline)</span>\">}</mark></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n<span class=\"token number\">1</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected newline before '}'.<br/><span class='eslint-error-rule-id'>eslint(react/jsx-curly-newline)</span>\">}</mark></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n",
        "fixable": true,
        "reason": "要么首尾都换行，要么首尾都不换行"
    },
    "react/jsx-curly-spacing": {
        "name": "react/jsx-curly-spacing",
        "value": [
            "error",
            {
                "when": "never",
                "attributes": { "allowMultiline": true },
                "children": true,
                "spacing": { "objectLiterals": "never" }
            }
        ],
        "description": "大括号内前后禁止有空格",
        "category": "JSX-specific",
        "badExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">wid<mark class=\"eslint-error\" data-tip=\"There should be no space after '{'<br/><span class='eslint-error-rule-id'>eslint<mark class=\"eslint-error\" data-tip=\"There should be no space before '}'<br/><span class='eslint-error-rule-id'>eslint(react/jsx-curly-spacing)</span>\">(</mark>react/jsx-curly-spacing)</span>\">t</mark>h</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">sty<mark class=\"eslint-error\" data-tip=\"There should be no space after '{'<br/><span class='eslint-error-rule-id'>eslint(react/jsx-cu<mark class=\"eslint-error\" data-tip=\"There should be no space before '}'<br/><span class='eslint-error-rule-id'>eslint(react/jsx-curly-spacing)</span>\">r</mark>ly-spacing)</span>\">l</mark>e</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n",
        "fixable": true
    },
    "react/jsx-equals-spacing": {
        "name": "react/jsx-equals-spacing",
        "value": ["error", "never"],
        "description": "props 与 value 之间的等号前后禁止有空格",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-filename-extension": {
        "name": "react/jsx-filename-extension",
        "value": "off",
        "description": "限制文件后缀",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/jsx-first-prop-new-line": {
        "name": "react/jsx-first-prop-new-line",
        "value": "off",
        "description": "第一个 prop 必须得换行",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制",
        "fixable": true
    },
    "react/jsx-fragments": {
        "name": "react/jsx-fragments",
        "value": ["error", "syntax"],
        "description": "必须使用 <></> 而不是 React.Fragment",
        "category": "JSX-specific",
        "badExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Prefer fragment shorthand over React.Fragment<br/><span class='eslint-error-rule-id'>eslint(react/jsx-fragments)</span>\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fra</span></span></span></mark><span class=\"token tag\"><span class=\"token tag\"><span class=\"token class-name\">gment</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n",
        "fixable": true,
        "reason": "<></> 不需要额外引入 Fragment 组件"
    },
    "react/jsx-handler-names": {
        "name": "react/jsx-handler-names",
        "value": "off",
        "description": "handler 的名称必须是 onXXX 或 handleXXX",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/jsx-indent": {
        "name": "react/jsx-indent",
        "value": ["error", 4],
        "description": "jsx 的 children 缩进必须为四个空格",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-indent-props": {
        "name": "react/jsx-indent-props",
        "value": ["error", 4],
        "description": "jsx 的 props 缩进必须为四个空格",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-max-depth": {
        "name": "react/jsx-max-depth",
        "value": "off",
        "description": "限制 jsx 层级",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-max-props-per-line": {
        "name": "react/jsx-max-props-per-line",
        "value": "off",
        "description": "限制每行的 props 数量",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制",
        "fixable": true
    },
    "react/jsx-no-bind": {
        "name": "react/jsx-no-bind",
        "value": "off",
        "description": "jsx 中禁止使用 bind",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "太严格了"
    },
    "react/jsx-no-literals": {
        "name": "react/jsx-no-literals",
        "value": "off",
        "description": "禁止在 jsx 中出现字符串",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/jsx-no-target-blank": {
        "name": "react/jsx-no-target-blank",
        "value": "off",
        "description": "禁止使用 target=\"_blank\"",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制"
    },
    "react/jsx-one-expression-per-line": {
        "name": "react/jsx-one-expression-per-line",
        "value": "off",
        "description": "禁止有内容的元素写在一行内",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-props-no-multi-spaces": {
        "name": "react/jsx-props-no-multi-spaces",
        "value": "error",
        "description": "禁止出现多于的空格",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-props-no-spreading": {
        "name": "react/jsx-props-no-spreading",
        "value": "off",
        "description": "禁止使用 {...props}",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-sort-default-props": {
        "name": "react/jsx-sort-default-props",
        "value": "off",
        "description": "defaultProps 必须按字母排序",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-sort-props": {
        "name": "react/jsx-sort-props",
        "value": "off",
        "description": "props 必须排好序",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制",
        "fixable": true
    },
    "react/jsx-tag-spacing": {
        "name": "react/jsx-tag-spacing",
        "value": [
            "error",
            { "closingSlash": "never", "beforeSelfClosing": "always", "afterOpening": "never" }
        ],
        "description": "jsx 的开始和闭合处禁止有空格",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "react/jsx-wrap-multilines": {
        "name": "react/jsx-wrap-multilines",
        "value": "off",
        "description": "多行的 jsx 必须有括号包起来",
        "category": "JSX-specific",
        "badExample": "",
        "goodExample": "",
        "reason": "没必要限制",
        "fixable": true
    },
    "react/jsx-key": {
        "name": "react/jsx-key",
        "value": "error",
        "description": "数组中的 jsx 必须有 key",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-comment-textnodes": {
        "name": "react/jsx-no-comment-textnodes",
        "value": "error",
        "description": "禁止在 jsx 中使用像注释的字符串",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-duplicate-props": {
        "name": "react/jsx-no-duplicate-props",
        "value": "error",
        "description": "禁止出现重复的 props",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-undef": {
        "name": "react/jsx-no-undef",
        "value": "error",
        "description": "禁止使用未定义的 jsx elemet",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-pascal-case": {
        "name": "react/jsx-pascal-case",
        "value": "error",
        "description": "禁止使用 pascal 写法的 jsx，比如 <TEST_COMPONENT>",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-uses-react": {
        "name": "react/jsx-uses-react",
        "value": "error",
        "description": "jsx 文件必须 import React",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-uses-vars": {
        "name": "react/jsx-uses-vars",
        "value": "error",
        "description": "定义了的 jsx element 必须使用",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-children-prop": {
        "name": "react/no-children-prop",
        "value": "error",
        "description": "禁止使用 children 做 props",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-danger-with-children": {
        "name": "react/no-danger-with-children",
        "value": "error",
        "description": "禁止在使用了 dangerouslySetInnerHTML 的组建内添加 children",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-deprecated": {
        "name": "react/no-deprecated",
        "value": "error",
        "description": "禁止使用已废弃的 api",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-did-update-set-state": {
        "name": "react/no-did-update-set-state",
        "value": "error",
        "description": "禁止在 componentDidUpdate 里面使用 setState",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-direct-mutation-state": {
        "name": "react/no-direct-mutation-state",
        "value": "error",
        "description": "禁止直接修改 this.state",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-find-dom-node": {
        "name": "react/no-find-dom-node",
        "value": "error",
        "description": "禁止使用 findDOMNode",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-is-mounted": {
        "name": "react/no-is-mounted",
        "value": "error",
        "description": "禁止使用 isMounted",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-redundant-should-component-update": {
        "name": "react/no-redundant-should-component-update",
        "value": "error",
        "description": "禁止在 PureComponent 中使用 shouldComponentUpdate",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-render-return-value": {
        "name": "react/no-render-return-value",
        "value": "error",
        "description": "禁止使用 ReactDOM.render 的返回值",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-string-refs": {
        "name": "react/no-string-refs",
        "value": "error",
        "description": "禁止使用字符串 ref",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-typos": {
        "name": "react/no-typos",
        "value": "error",
        "description": "禁止拼写错误",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unescaped-entities": {
        "name": "react/no-unescaped-entities",
        "value": "error",
        "description": "禁止在组件的内部存在未转义的 >, \", ' 或 }",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-will-update-set-state": {
        "name": "react/no-will-update-set-state",
        "value": "error",
        "description": "禁止在 componentWillUpdate 中使用 setState",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/prefer-es6-class": {
        "name": "react/prefer-es6-class",
        "value": ["error", "always"],
        "description": "必须使用 Class 的形式创建组件",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/require-render-return": {
        "name": "react/require-render-return",
        "value": "error",
        "description": "render 方法中必须有返回值",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/style-prop-object": {
        "name": "react/style-prop-object",
        "value": "error",
        "description": "style 属性的取值必须是 object",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/void-dom-elements-no-children": {
        "name": "react/void-dom-elements-no-children",
        "value": "error",
        "description": "HTML 中的自闭和标签禁止有 children",
        "category": "",
        "badExample": "",
        "goodExample": ""
    }
}
