{
    "@typescript-eslint/indent": {
        "name": "@typescript-eslint/indent",
        "value": ["error", 4, { "SwitchCase": 1, "flatTernaryExpressions": true }],
        "description": "一个缩进必须用四个空格替代",
        "category": "Stylistic Issues",
        "badExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 4 spaces but found 2.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/indent)</span>\">  </mark><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 8 spaces but found 4.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/indent)</span>\">    </mark><span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 12 spaces but found 8.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/indent)</span>\">        </mark><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 8 spaces but found 4.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/indent)</span>\">    </mark><span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n<mark class=\"eslint-error\" data-tip=\"Expected indentation of 12 spaces but found 8.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/indent)</span>\">        </mark><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n",
        "fixable": true
    },
    "@typescript-eslint/adjacent-overload-signatures": {
        "name": "@typescript-eslint/adjacent-overload-signatures",
        "value": "error",
        "description": "重载的函数必须写在一起",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> NSFoo1 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <mark class=\"eslint-error\" data-tip=\"All 'foo' signatures should be adjacent.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/adjacent-overload-signatures)</span>\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TypeFoo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <mark class=\"eslint-error\" data-tip=\"All 'foo' signatures should be adjacent.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/adjacent-overload-signatures)</span>\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFoo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <mark class=\"eslint-error\" data-tip=\"All 'foo' signatures should be adjacent.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/adjacent-overload-signatures)</span>\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> NSFoo2 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TypeFoo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFoo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "reason": "增加可读性"
    },
    "@typescript-eslint/array-type": {
        "name": "@typescript-eslint/array-type",
        "value": "off",
        "description": "限制数组类型必须使用 Array<T> 或 T[]",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "允许灵活运用两者",
        "fixable": true
    },
    "@typescript-eslint/await-thenable": {
        "name": "@typescript-eslint/await-thenable",
        "value": "off",
        "description": "禁止对没有 then 方法的对象使用 await",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    "@typescript-eslint/ban-ts-ignore": {
        "name": "@typescript-eslint/ban-ts-ignore",
        "value": "off",
        "description": "是否允许使用 // @ts-ignore 来忽略编译错误",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "既然已经使用注释来忽略编译错误了，说明已经清楚可能带来的后果"
    },
    "@typescript-eslint/ban-types": {
        "name": "@typescript-eslint/ban-types",
        "value": "off",
        "description": "禁用特定的类型",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "该规则用于禁止某个具体的类型的使用",
        "fixable": true
    },
    "@typescript-eslint/camelcase": {
        "name": "@typescript-eslint/camelcase",
        "value": "off",
        "description": "变量名必须是 camelcase 风格的",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "很多 api 或文件名都不是 camelcase"
    },
    "@typescript-eslint/class-name-casing": {
        "name": "@typescript-eslint/class-name-casing",
        "value": "error",
        "description": "类名与接口名必须为驼峰式",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"Class 'Invalid_Class_Name' must be PascalCased.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/class-name-casing)</span>\">Invalid_Class_Name</mark></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"Interface 'invalidInterface' must be PascalCased.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/class-name-casing)</span>\">invalidInterface</mark></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidClassName</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ValidInterface</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n"
    },
    "@typescript-eslint/explicit-function-return-type": {
        "name": "@typescript-eslint/explicit-function-return-type",
        "value": "off",
        "description": "函数返回值必须与声明的类型一致",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    "@typescript-eslint/explicit-member-accessibility": {
        "name": "@typescript-eslint/explicit-member-accessibility",
        "value": "error",
        "description": "必须设置类的成员的可访问性",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on class property foo.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\"><span class=\"token keyword\">static</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on method definition getFoo.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\"><span class=\"token keyword\">static</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo2<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on method definition constructor.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on class property bar.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\">bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on method definition getBar.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\"><span class=\"token function\">getBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on get property accessor baz.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\"><span class=\"token keyword\">get</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Missing accessibility modifier on set property accessor baz.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/explicit-member-accessibility)</span>\"><span class=\"token keyword\">set</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo2<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n",
        "reason": "将不需要公开的成员设为私有的，可以增强代码的可理解性，对文档输出也很友好"
    },
    "@typescript-eslint/func-call-spacing": {
        "name": "@typescript-eslint/func-call-spacing",
        "value": ["error", "never"],
        "description": "函数名和执行它的括号之间禁止有空格",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">function</span> createArray1<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ncreateArray1<span class=\"token operator\">&lt;</span><span class=\"token builtin\">str<mark class=\"eslint-error\" data-tip=\"Unexpected space or newline between function name and paren.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/func-call-spacing)</span>\">i</mark>ng</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['x', 'x', 'x']</span>\n",
        "goodExample": "<span class=\"token keyword\">function</span> createArray2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ncreateArray2<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['x', 'x', 'x']</span>\n",
        "fixable": true
    },
    "@typescript-eslint/generic-type-naming": {
        "name": "@typescript-eslint/generic-type-naming",
        "value": "off",
        "description": "约束泛型的命名规则",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/interface-name-prefix": {
        "name": "@typescript-eslint/interface-name-prefix",
        "value": "off",
        "description": "接口名称必须已 I 开头",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/member-delimiter-style": {
        "name": "@typescript-eslint/member-delimiter-style",
        "value": "error",
        "description": "接口和类型别名的成员之间必须使用分号分隔",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar1</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Baz1</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> TypeFoo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> TypeBar1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></mark><mark class=\"eslint-error\" data-tip=\"Unexpected separator (;).<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"></mark>-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar1</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Baz1</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> TypeFoo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> TypeBar1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></mark><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/> <span class=\"token punctuation\">}</span><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"></mark><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"></mark><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"></mark><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"></mark><mark class=\"eslint-error\" data-tip=\"Expected a semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-delimiter-style)</span>\"></mark></mark>\n",
        "goodExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar2</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Baz2</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> TypeFoo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> TypeBar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n",
        "fixable": true
    },
    "@typescript-eslint/member-naming": {
        "name": "@typescript-eslint/member-naming",
        "value": "off",
        "description": "私有成员必须以 _ 开头",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "已有 private 修饰符了，没必要限制变量名"
    },
    "@typescript-eslint/member-ordering": {
        "name": "@typescript-eslint/member-ordering",
        "value": [
            "error",
            {
                "default": [
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "static-field",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "static-method",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "instance-field",
                    "field",
                    "constructor",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "instance-method",
                    "method"
                ]
            }
        ],
        "description": "指定类成员的排序规则",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <mark class=\"eslint-error\" data-tip=\"Member getBar2 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">protected</span> <span class=\"token function\">getBar2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member getBar1 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">public</span> <span class=\"token function\">getBar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member constructor should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Foo1<span class=\"token punctuation\">.</span><span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member bar3 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">private</span> bar3 <span class=\"token operator\">=</span> <span class=\"token string\">'bar3'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member bar2 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">protected</span> bar2 <span class=\"token operator\">=</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member bar1 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">public</span> bar1 <span class=\"token operator\">=</span> <span class=\"token string\">'bar1'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member getFoo3 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo1<span class=\"token punctuation\">.</span>foo3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member getFoo2 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member getFoo1 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member foo3 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> foo3 <span class=\"token operator\">=</span> <span class=\"token string\">'foo3'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member foo2 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> foo2 <span class=\"token operator\">=</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">;</span></mark>\n    <mark class=\"eslint-error\" data-tip=\"Member foo1 should be declared before all private instance method definitions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/member-ordering)</span>\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> foo1 <span class=\"token operator\">=</span> <span class=\"token string\">'foo1'</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> foo1 <span class=\"token operator\">=</span> <span class=\"token string\">'foo1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> foo2 <span class=\"token operator\">=</span> <span class=\"token string\">'foo2'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> foo3 <span class=\"token operator\">=</span> <span class=\"token string\">'foo3'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Foo2<span class=\"token punctuation\">.</span>foo3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> bar1 <span class=\"token operator\">=</span> <span class=\"token string\">'bar1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> bar2 <span class=\"token operator\">=</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> bar3 <span class=\"token operator\">=</span> <span class=\"token string\">'bar3'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Foo2<span class=\"token punctuation\">.</span><span class=\"token function\">getFoo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getBar1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">getBar2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">getBar3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar3<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n",
        "reason": "优先级：\n1. static > instance\n2. field > constructor > method\n3. public > protected > private"
    },
    "@typescript-eslint/no-angle-bracket-type-assertion": {
        "name": "@typescript-eslint/no-angle-bracket-type-assertion",
        "value": "error",
        "description": "类型断言必须使用 as Type，禁止使用 <Type>",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">let</span> bar1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo1 <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Prefer 'as string' instead of '<string>' when doing type assertions.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-angle-bracket-type-assertion)</span>\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>b</mark>ar1<span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> bar2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo2 <span class=\"token operator\">=</span> bar2 <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n",
        "reason": "<Type> 容易被理解为 jsx"
    },
    "@typescript-eslint/no-array-constructor": {
        "name": "@typescript-eslint/no-array-constructor",
        "value": "off",
        "description": "禁止使用 Array 构造函数",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    "@typescript-eslint/no-empty-interface": {
        "name": "@typescript-eslint/no-empty-interface",
        "value": "error",
        "description": "禁止定义空的接口",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"An empty interface is equivalent to `{}`.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-empty-interface)</span>\">Foo1</mark></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n"
    },
    "@typescript-eslint/no-explicit-any": {
        "name": "@typescript-eslint/no-explicit-any",
        "value": "off",
        "description": "禁止使用 any",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-extra-parens": {
        "name": "@typescript-eslint/no-extra-parens",
        "value": ["error", "functions"],
        "description": "禁止函数表达式中出现多余的括号",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">let</span> foo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Unnecessary parentheses around expression.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-extra-parens)</span>\">(</mark></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n",
        "fixable": true
    },
    "@typescript-eslint/no-extraneous-class": {
        "name": "@typescript-eslint/no-extraneous-class",
        "value": "off",
        "description": "禁止定义没必要的类，比如只有静态方法的类",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-for-in-array": {
        "name": "@typescript-eslint/no-for-in-array",
        "value": "off",
        "description": "禁止对 array 使用 for in 循环",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    "@typescript-eslint/no-inferrable-types": {
        "name": "@typescript-eslint/no-inferrable-types",
        "value": "error",
        "description": "禁止给一个初始化时直接赋值为 number, string 的变量显式的指定类型",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"Type number trivially inferred from a number literal, remove type annotation.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-inferrable-types)</span>\">foo1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></mark><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <mark class=\"eslint-error\" data-tip=\"Type string trivially inferred from a string literal, remove type annotation.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-inferrable-types)</span>\">bar1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span></mark><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> foo2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar2 <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n",
        "reason": "可以简化代码",
        "fixable": true
    },
    "@typescript-eslint/no-magic-numbers": {
        "name": "@typescript-eslint/no-magic-numbers",
        "value": "off",
        "description": "禁止使用 magic numbers",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-misused-new": {
        "name": "@typescript-eslint/no-misused-new",
        "value": "off",
        "description": "禁止在接口中定义 constructor，或在类中定义 new",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-namespace": {
        "name": "@typescript-eslint/no-namespace",
        "value": ["error", { "allowDeclarations": true, "allowDefinitionFiles": true }],
        "description": "禁止使用 namespace 来定义命名空间",
        "category": "TypeScript",
        "badExample": "<mark class=\"eslint-error\" data-tip=\"ES2015 module syntax is preferred over custom TypeScript modules and namespaces.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-namespace)</span>\"><span class=\"token keyword\">namespace</span> foo1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n",
        "goodExample": "<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> foo1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n",
        "reason": "使用 es6 引入模块，才是更标准的方式。\n允许使用 declare namespace ... {} 来定义外部命名空间"
    },
    "@typescript-eslint/no-non-null-assertion": {
        "name": "@typescript-eslint/no-non-null-assertion",
        "value": "off",
        "description": "禁止使用 non-null 断言（感叹号）",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "使用 non-null 断言时就已经清楚了风险"
    },
    "@typescript-eslint/no-object-literal-type-assertion": {
        "name": "@typescript-eslint/no-object-literal-type-assertion",
        "value": "error",
        "description": "禁止对对象字面量进行类型断言（断言成 any 是允许的）",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">const</span> foo1 <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Type assertion on object literals is forbidden, use a type annotation instead.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-object-literal-type-assertion)</span>\"><span class=\"token punctuation\">{</span> \n    bar<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> object</mark><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">const</span> foo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    bar<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n"
    },
    "@typescript-eslint/no-parameter-properties": {
        "name": "@typescript-eslint/no-parameter-properties",
        "value": "error",
        "description": "禁止给类的构造函数的参数添加修饰符",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"Property name cannot be declared in the constructor.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-parameter-properties)</span>\"><span class=\"token keyword\">private</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></mark></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"
    },
    "@typescript-eslint/no-require-imports": {
        "name": "@typescript-eslint/no-require-imports",
        "value": "off",
        "description": "禁止使用 require",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "有时需要动态引入，还是需要用 require"
    },
    "@typescript-eslint/no-this-alias": {
        "name": "@typescript-eslint/no-this-alias",
        "value": ["error", { "allowDestructuring": true }],
        "description": "禁止将 this 赋值给其他变量，除非是解构赋值",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <mark class=\"eslint-error\" data-tip=\"Unexpected aliasing of 'this' to local variable.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-this-alias)</span>\">self</mark> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n"
    },
    "@typescript-eslint/no-triple-slash-reference": {
        "name": "@typescript-eslint/no-triple-slash-reference",
        "value": "error",
        "description": "禁止使用三斜杠引入类型定义文件",
        "category": "TypeScript",
        "badExample": "<span class=\"token comment\"><mark class=\"eslint-error\" data-tip=\"Do not use a triple slash reference.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-triple-slash-reference)</span>\">/// &lt;reference path=\"./Anima</mark>l\"></span>\n",
        "goodExample": "<span class=\"token keyword\">import</span> Animal <span class=\"token keyword\">from</span> <span class=\"token string\">'./Animal'</span><span class=\"token punctuation\">;</span>\n",
        "reason": "三斜杠是已废弃的语法"
    },
    "@typescript-eslint/no-type-alias": {
        "name": "@typescript-eslint/no-type-alias",
        "value": "off",
        "description": "禁止使用类型别名",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    "@typescript-eslint/no-unnecessary-qualifier": {
        "name": "@typescript-eslint/no-unnecessary-qualifier",
        "value": "off",
        "description": "在命名空间中，可以直接使用内部变量，不需要添加命名空间前缀",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "已经禁止使用命名空间了",
        "fixable": true,
        "requires": true
    },
    "@typescript-eslint/no-unnecessary-type-assertion": {
        "name": "@typescript-eslint/no-unnecessary-type-assertion",
        "value": "off",
        "description": "禁止无用的类型断言",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true,
        "requires": true
    },
    "@typescript-eslint/no-unused-vars": {
        "name": "@typescript-eslint/no-unused-vars",
        "value": "off",
        "description": "禁止出现未使用的变量",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    "@typescript-eslint/no-use-before-define": {
        "name": "@typescript-eslint/no-use-before-define",
        "value": "off",
        "description": "禁止在定义变量之前就使用它",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    "@typescript-eslint/no-useless-constructor": {
        "name": "@typescript-eslint/no-useless-constructor",
        "value": "error",
        "description": "禁止出现没必要的 constructor",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Useless constructor.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-useless-constructor)</span>\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Useless constructor.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-useless-constructor)</span>\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></mark>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"
    },
    "@typescript-eslint/no-var-requires": {
        "name": "@typescript-eslint/no-var-requires",
        "value": "error",
        "description": "禁止使用 require 来引入模块",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">const</span> Animal <span class=\"token operator\">=</span> <mark class=\"eslint-error\" data-tip=\"Require statement not part of import statement.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/no-var-requires)</span>\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Animal'</span><span class=\"token punctuation\">)</span></mark><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">import</span> Animal <span class=\"token keyword\">from</span> <span class=\"token string\">'./Animal'</span><span class=\"token punctuation\">;</span>\n",
        "reason": "统一使用 import 来引入模块，特殊情况使用单行注释允许 require 引入"
    },
    "@typescript-eslint/prefer-for-of": {
        "name": "@typescript-eslint/prefer-for-of",
        "value": "error",
        "description": "使用 for 循环遍历数组时，如果 index 仅用于获取成员，则必须使用 for of 循环替代 for 循环",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<mark class=\"eslint-error\" data-tip=\"Expected a `for-of` loop instead of a `for` loop with this simple iteration<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/prefer-for-of)</span>\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></mark>\n",
        "goodExample": "<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// i is used to write to arr, so for-of could not be used.</span>\n    arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// i is used independent of arr, so for-of could not be used.</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "reason": "for of 循环更加易读"
    },
    "@typescript-eslint/prefer-function-type": {
        "name": "@typescript-eslint/prefer-function-type",
        "value": "error",
        "description": "可以简写为函数类型的接口或字面类似，必须简写",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo1</span> <span class=\"token punctuation\">{</span>\n    <mark class=\"eslint-error\" data-tip=\"Interface has only a call signature - use 'type Foo1 = () => string;' instead.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/prefer-function-type)</span>\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></mark>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">Foo2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n",
        "reason": "reason",
        "fixable": true
    },
    "@typescript-eslint/prefer-includes": {
        "name": "@typescript-eslint/prefer-includes",
        "value": "off",
        "description": "使用 includes 而不是 indexOf",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true,
        "requires": true
    },
    "@typescript-eslint/prefer-interface": {
        "name": "@typescript-eslint/prefer-interface",
        "value": "error",
        "description": "优先使用接口而不是字面类型",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">type</span> <mark class=\"eslint-error\" data-tip=\"Use an interface instead of a type literal.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/prefer-interface)</span>\">Foo1</mark> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo2</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "reason": "接口可以 implement extend 和 merge",
        "fixable": true
    },
    "@typescript-eslint/prefer-namespace-keyword": {
        "name": "@typescript-eslint/prefer-namespace-keyword",
        "value": "error",
        "description": "禁止使用 module 来定义命名空间",
        "category": "TypeScript",
        "badExample": "<mark class=\"eslint-error\" data-tip=\"Use 'namespace' instead of 'module' to declare custom TypeScript modules.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/prefer-namespace-keyword)</span>\"><span class=\"token keyword\">module</span> Foo1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></mark>\n",
        "goodExample": "<span class=\"token keyword\">namespace</span> Foo2 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n",
        "reason": "module 已成为 js 的关键字",
        "fixable": true
    },
    "@typescript-eslint/prefer-regexp-exec": {
        "name": "@typescript-eslint/prefer-regexp-exec",
        "value": "off",
        "description": "使用 RegExp#exec 而不是 String#match",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    "@typescript-eslint/prefer-string-starts-ends-with": {
        "name": "@typescript-eslint/prefer-string-starts-ends-with",
        "value": "off",
        "description": "使用 String#startsWith 而不是其他方式",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true,
        "requires": true
    },
    "@typescript-eslint/promise-function-async": {
        "name": "@typescript-eslint/promise-function-async",
        "value": "off",
        "description": "async 函数的返回值必须是 Promise",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "有时 async 函数在某个分支是同步的，不需要返回 Promise",
        "requires": true
    },
    "@typescript-eslint/require-array-sort-compare": {
        "name": "@typescript-eslint/require-array-sort-compare",
        "value": "off",
        "description": "使用 sort 时必须传入比较函数",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    "@typescript-eslint/restrict-plus-operands": {
        "name": "@typescript-eslint/restrict-plus-operands",
        "value": "off",
        "description": "使用加号时，两者必须同为数字或同为字符串",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    "@typescript-eslint/semi": {
        "name": "@typescript-eslint/semi",
        "value": ["error", "always", { "omitLastInOneLineBlock": true }],
        "description": "结尾必须有分号",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span><mark class=\"eslint-error\" data-tip=\"Missing semicolon.<br/><span class='eslint-error-rule-id'><mark class=\"eslint-error\" data-tip=\"Missing semicolon.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/semi)</span>\">e</mark>slint(@typescript-eslint/semi)</span>\"></mark>\n",
        "goodExample": "<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "fixable": true
    },
    "@typescript-eslint/type-annotation-spacing": {
        "name": "@typescript-eslint/type-annotation-spacing",
        "value": "error",
        "description": "类型定义的冒号前面必须没有空格，后面必须有一个空格",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">let</span> foo1<span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected a space after the ':'.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/type-annotation-spacing)</span>\">:</mark></span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar1 <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Expected a space after the ':'.<br/><span class='eslint-error-rule-id'><mark class=\"eslint-error\" data-tip=\"Unexpected a space before the ':'.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/type-annotation-spacing)</span>\">e</mark>slint(@typescript-eslint/type-annotation-spacing)</span>\">:</mark></span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> baz1 <span class=\"token punctuation\"><mark class=\"eslint-error\" data-tip=\"Unexpected a space before the ':'.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/type-annotation-spacing)</span>\">:</mark></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n",
        "goodExample": "<span class=\"token keyword\">let</span> foo2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n",
        "fixable": true
    },
    "@typescript-eslint/unbound-method": {
        "name": "@typescript-eslint/unbound-method",
        "value": "off",
        "description": "方法调用时需要绑定到正确的 this 上",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    "@typescript-eslint/unified-signatures": {
        "name": "@typescript-eslint/unified-signatures",
        "value": "error",
        "description": "函数重载时，若能通过联合类型将两个函数的类型声明合为一个，则使用联合类型而不是两个函数声明",
        "category": "TypeScript",
        "badExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><mark class=\"eslint-error\" data-tip=\"These overloads can be combined into one signature taking `number | string`.<br/><span class='eslint-error-rule-id'>eslint(@typescript-eslint/unified-signatures)</span>\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></mark></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n",
        "goodExample": "<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n"
    }
}
